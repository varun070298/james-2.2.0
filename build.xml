<?xml version="1.0"?>
<!-- ==========================================================================

 James build file $Revision: 1.116.2.33 $  Committed on $Date: 2004/06/14 20:44:13 $ by: $Author: noel $

Authors:
 James Project <server-dev@james.apache.org>

Legal:
  Copyright (c) 1999-2004 The Apache Software Foundation.
  All rights reserved.

  Licensed under the Apache License, Version 2.0 (the "License"); you
  may not use this file except in compliance with the License. You
  may obtain a copy of the License at:

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied.  See the License for the specific language governing
   permissions and limitations under the License.

==============================================================================
 -->
<project default="main" basedir=".">
    <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
    <property file=".ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property name="name" value="james"/>
    <property name="Name" value="James"/>
    <property name="version" value="2.2.0"/>
    <property name="mailet_name" value="mailet_1_0"/>
    <property name="mailet_version" value="1.0"/>
    <property name="year" value="1999-2003"/>
    <!-- There should be no need to override default compiler but need to change
    javac task to run without this -->
    <property name="build.compiler" value="modern"/>
    <!--
    these are here only for those who use jikes compiler. For other
    developers this part makes no difference.
  -->
    <property name="build.compiler.emacs" value="on"/>
    <property name="build.compiler.pedantic" value="true"/>
    <property name="build.compiler.depend" value="true"/>
    <property name="build.compiler.fulldepend" value="true"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <!--
       ===================================================================
       Set the properties for proposal directories
       ===================================================================
  -->

    <property name="proposal.base" value="proposals"/>
    <property name="proposal.dir" value="${proposal.base}/${proposal.name}"/>
    <property name="java.proposal.dir" value="${proposal.dir}/java"/>
    <property name="conf.proposal.dir" value="${proposal.dir}/conf"/>


    <!--
       ===================================================================
       Set the properties for intermediate directory
       ===================================================================
  -->
    <property name="build.dir" value="build"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>
    <property name="build.docs" value="${build.dir}/docs"/>
    <property name="build.mailetdocs" value="${build.dir}/mailetdocs"/>
    <property name="build.conf" value="${build.dir}/conf"/>
    <property name="build.metainf" value="${build.dir}/meta-inf"/>

    <!--
       ===================================================================
       Set the properties for build tools directory
       ===================================================================
  -->
    <property name="tools.dir" value="tools"/>
    <property name="tools.lib.dir" value="${tools.dir}/lib"/>

    <!--
       ===================================================================
       Set the properties for source directories and parameters
       ===================================================================
  -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="xdocs.dir" value="${src.dir}/xdocs"/>
    <property name="docs.src" value="${xdocs.dir}"/>
    <property name="metainf.dir" value="${src.dir}/meta-inf"/>

    <property name="constants.file" value="org/apache/james/Constants.java"/>
    <property name="poolconn.file" value="org/apache/james/util/mordred/PoolConnEntry.java"/>


    <!--
       ===================================================================
       Set the properties for the distribution directories
       ===================================================================
  -->
    <property name="dist.base" value="dist"/>
    <property name="dist.name" value="${name}-${version}"/>
    <property name="dist.dir" value="${dist.base}/${dist.name}"/>

    <!--
       ===================================================================
       Third party binary directories
       ===================================================================
  -->
    <property name="lib.dir" value="lib"/>
    <property name="phoenix.dir" value="phoenix-bin"/>
    <property name="phoenix.lib.dir" value="${phoenix.dir}/lib"/>

    <!--
       ===================================================================
       Set the properties for the website directories
       ===================================================================
  -->
    <property name="www.dir" value="www"/>

    <!--
       ===================================================================
       Set the classpath
       ===================================================================
  -->
    <property name="xerces.jar" value="${lib.dir}/xerces-1.4.3.jar"/>
    <path id="project.class.path">
        <pathelement location="${xerces.jar}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <exclude name="xerces.jar"/>
        </fileset>
        <fileset dir="${phoenix.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.classes}"/>
    </path>

    <path id="tools.class.path">
        <fileset dir="${tools.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${phoenix.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <taskdef name="sar" classname="org.apache.avalon.phoenix.tools.tasks.Sar">
        <classpath refid="project.class.path"/>
    </taskdef>

    <taskdef name="phoenix-mxinfo" classname="org.apache.avalon.phoenix.tools.xdoclet.PhoenixXDoclet">
        <classpath refid="tools.class.path"/>
    </taskdef>

    <!--
       ===================================================================
                                  Main target
       ===================================================================
  -->
    <target name="main" depends="dist-lite"/>
    <!--
       ===================================================================
        Prepare-common target - common tasks executed in preparation for
        all targets
       ===================================================================
  -->
    <target name="prepare-common">
    <echo message="Preparing code"/>

        <tstamp/>
        <available property="jdbc3.present" classname="java.sql.Savepoint"/>
        <available file="${phoenix.dir}/bin" type="dir" property="phoenix.bin.present"/>
        <mkdir dir="${dist.dir}"/>
        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="LICENSE.txt"/>
                <include name="README"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${java.dir}" includes="**/*.java" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.minfo" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.xinfo" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${xdocs.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${conf.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${metainf.dir}" includes="**/*" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="." includes="build.sh" eol="lf"/>
        <fixcrlf srcdir="." includes="build.bat" eol="crlf"/>
        <fixcrlf srcdir="." includes="build.xml" eol="lf"/>
        <chmod perm="+x">
            <fileset dir=".">
                <include name="build.sh"/>
            </fileset>
        </chmod>
        <available classname="org.apache.velocity.anakia.AnakiaTask" property="AnakiaTask.present"/>
        <mkdir dir="${build.src}"/>
        <copy todir="${build.src}">
            <fileset dir="${java.dir}">
                <include name="${constants.file}"/>
                <include name="${poolconn.file}"/>
            </fileset>
        </copy>
        <replace file="${build.src}/${constants.file}" token="@@VERSION@@" value="${version}"/>
        <replace file="${build.src}/${constants.file}" token="@@NAME@@" value="${Name}"/>
        <replace file="${build.src}/${constants.file}" token="@@DATE@@" value="${TODAY}"/>
    </target>

    <!--
       ===================================================================
         Copy files, set permissions and line feeds for the packaged Phoenix distribution
       ===================================================================
  -->
    <target name="prepare-phoenix" depends="prepare-common" if="phoenix.bin.present">
        <echo message="Phoenix distribution present - adjusting linefeeds and permissions, copying files"/>
        <property name="dist.bin" value="${dist.dir}/bin"/>
        <fixcrlf srcdir="${phoenix.dir}/bin" includes="phoenix.sh" eol="lf"/>
        <copy todir="${dist.dir}">
            <fileset dir="${phoenix.dir}">
                <exclude name="CVS/**"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${dist.bin}" includes="run.sh" eol="lf"/>
        <fixcrlf srcdir="${dist.bin}" includes="run.bat" eol="crlf"/>
        <chmod perm="+x">
            <fileset dir="${dist.bin}">
                <include name="run.sh"/>
                <include name="phoenix.sh"/>
            </fileset>
        </chmod>
    </target>

    <target name="prepare-mxinfo">
        <phoenix-mxinfo destdir="${build.classes}">
            <fileset dir="${java.dir}">
                <include name="**" />
            </fileset>
            <mxinfo/>
        </phoenix-mxinfo>
    </target>
    <!--
       ===================================================================
                                   meta-inf

           Currently a straight copy from source to build.
           Add augmentions as required.
       ===================================================================
    -->
    <target name="prepare-metainf">
        <copy todir="${build.metainf}">
            <fileset dir="${metainf.dir}"/>
        </copy>
    </target>

    <!--
       ===================================================================
                                   jdbc3
       ===================================================================
  -->
    <target name="prepare-jdbc3" depends="prepare-common" if="jdbc3.present">
        <echo message="JDBC v3 in classpath - making code JDBC 3.0 compliant"/>
        <replace file="${build.src}/${poolconn.file}" token="/* JDBC_3_ANT_KEY" value=""/>
        <replace file="${build.src}/${poolconn.file}" token="JDBC_3_ANT_KEY */" value=""/>
    </target>

    <!--
       ===================================================================
                                  Prepare target
       ===================================================================
    -->
    <target name="prepare" depends="prepare-common,prepare-phoenix,prepare-jdbc3,prepare-mxinfo,prepare-metainf"/>

    <!--
       ===================================================================
                                  compile
       ===================================================================
  -->
    <target name="compile" depends="prepare">
    <echo message="Compiling James Java sources"/>
        <available property="jndi.present" classname="javax.naming.InitialContext"/>
        <mkdir dir="${build.classes}"/>
        <javac destdir="${build.classes}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}">
            <classpath refid="project.class.path"/>
            <src path="${build.src}"/>
            <src path="${java.dir}"/>
            <exclude name="${constants.file}"/>
            <exclude name="${poolconn.file}"/>
            <exclude name="org/apache/james/userrepository/UsersLDAPRepository.java" unless="jndi.present"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${java.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xinfo"/>
                <include name="**/*.mxinfo"/>
            </fileset>
        </copy>
    </target>
    <!--
       ===================================================================
                                  Javadocs, and mailet javadocs
       ===================================================================
  -->
    <target name="javadocs">
    <echo message="Making James Javadocs"/>

        <delete dir="${build.javadocs}"/>
        <mkdir dir="${build.javadocs}"/>
        <javadoc packagenames="org.apache.*" sourcepath="${java.dir}" destdir="${build.javadocs}">
            <classpath refid="project.class.path"/>
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-use"/>
                <param name="-breakiterator"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
                <param name="-link" value="http://avalon.apache.org/api"/>
                <param name="-link" value="http://avalon.apache.org/phoenix/api"/>
                <param name="-link" value="http://avalon.apache.org/cornerstone/api"/>
                <param name="-link" value="http://avalon.apache.org/logkit/api"/>
                <param name="-doctitle" value="${Name} ${version}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-bottom" value="&quot;Copyright &#169; ${year} ASF James Project. All Rights Reserved.&quot;"/>
            </doclet>
        </javadoc>
        <echo message="Making Mailet Javadocs"/>
        <javadoc packagenames="org.apache.mailet.*" sourcepath="${java.dir}" destdir="${build.dir}/mailet">
            <classpath refid="project.class.path"/>
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-breakiterator"/>
                <param name="-use"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
                <param name="-link" value="http://avalon.apache.org/api"/>
                <param name="-link" value="http://avalon.apache.org/phoenix/api"/>
                <param name="-link" value="http://avalon.apache.org/cornerstone/api"/>
                <param name="-link" value="http://avalon.apache.org/logkit/api"/>
                <param name="-doctitle" value="Apache Mailet API"/>
                <param name="-windowtitle" value="Apache Mailet API"/>
                <param name="-bottom" value="&quot;Copyright &#169; ${year} ASF James Project. All Rights Reserved.&quot;"/>
            </doclet>
        </javadoc>
    </target>
    <!--
       ===================================================================
                                  build xdocs
       ===================================================================
  -->
    <target name="xdocs" depends="prepare">
        <style style="${docs.src}/stylesheets/site.xsl"
                basedir="${docs.src}/"
                destdir="${build.docs}/"
                includes="**/*.xml" >
        </style>
        <copy todir="${build.docs}" filtering="no">
            <fileset dir="${docs.src}">
                        <include name="**/*.css"/>
            </fileset>
        </copy>
        <copy todir="${build.docs}/images" filtering="no">
            <fileset dir="${docs.src}/images">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/docs"/>
        <copy todir="${dist.dir}/docs" filtering="no">
            <fileset dir="${build.docs}"/>
        </copy>
    </target>
    <!--
       ===================================================================
                                build   website
       ===================================================================
  -->
    <target name="website" depends="xdocs,javadocs">
    <echo message="preparing website in ${www.dir}"/>
        <delete>
            <fileset dir="${www.dir}">
                <exclude name="CVS/**"/>
                <exclude name="rfclist/**"/>
                <exclude name="javadocs/**"/>
                <exclude name="mailet/**"/>
            </fileset>
        </delete>
        <mkdir dir="${www.dir}"/>
        <copy todir="${www.dir}" filtering="no">
            <fileset dir="${build.docs}"/>
        </copy>
        <copy todir="${www.dir}" filtering="no">
            <fileset dir="${build.dir}">
                <include name="javadocs/**"/>
                <include name="mailet/**"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${www.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${www.dir}" includes="**/*.css" eol="lf" tab="remove" tablength="4" />
    </target>
    <!--
       ===================================================================
                Build everything
       ===================================================================
  -->
    <target name="everything" depends="clean,website,dist-bin,dist-src,dist-mailet-SDK"/>
    <!--
       ===================================================================
                                  Build all distributions
       ===================================================================
  -->
    <target name="dist" depends="dist-bin,dist-src,dist-mailet-SDK"/>
    <!--
       ===================================================================
                                  Make james.sar
       ===================================================================
  -->
    <target name="sar" depends="compile">
    <echo message="Making James Sarfile (james.sar)"/>

        <!-- builds james-sar-->
        <mkdir dir="${build.lib}"/>
        <!-- Make james.jar-->
        <jar jarfile="${build.lib}/${name}.jar" basedir="${build.classes}" manifest="${src.dir}/Manifest.mf">
            <include name="org/apache/james/**"/>
            <metainf dir="${build.metainf}"/>
        </jar>
        <!-- Make mailet_x_y.jar-->
        <jar jarfile="${build.lib}/${mailet_name}.jar" basedir="${build.classes}" manifest="${src.dir}/Manifest-mailet.mf">
            <include name="org/apache/mailet/**"/>
        </jar>
        <!-- Make sar file-->
        <sar sarfile="${build.lib}/${name}.sar" config="${conf.dir}/james-config.xml" environment="${conf.dir}/james-server.xml" assembly="${conf.dir}/james-assembly.xml">
            <lib dir="${build.lib}/">
                <include name="*.jar"/>
            </lib>
            <lib dir="lib">
                <include name="dnsjava-1.6.2.jar"/>
                <include name="jakarta-oro-2.0.8.jar"/>
                <include name="mm.mysql-2.0.14.jar"/>
                <include name="mm.mysql.LICENCE"/>
                <include name="avalon-framework-4.1.3.jar"/>
                <include name="cornerstone.jar"/>
                <include name="excalibur-datasource-1.0.jar"/>
                <include name="activation.jar"/>
                <include name="mail-1.3.1.jar"/>
                <include name="commons-net-1.0.0-dev.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-pool-1.2.jar"/>
                <include name="commons-dbcp-1.2.1.jar"/>
            </lib>
            <zipfileset dir="${conf.dir}" fullpath="conf/sqlResources.xml">
                <include name="sqlResources.xml"/>
            </zipfileset>
            <zipfileset dir="${conf.dir}" fullpath="conf/miResources.xml">
                <include name="miResources.xml"/>
            </zipfileset>
            <zipfileset dir="${conf.dir}" fullpath="conf/james-listmanager.xml">
                <include name="james-listmanager.xml"/>
            </zipfileset>
            <zipfileset dir="${conf.dir}" fullpath="conf/james-liststores.xml">
                <include name="james-liststores.xml"/>
            </zipfileset>
            <zipfileset dir="${conf.dir}" fullpath="conf/james-fetchmail.xml">
                <include name="james-fetchmail.xml"/>
            </zipfileset>
            <zipfileset dir="${conf.dir}/samples/fetchmail" prefix="conf/samples/fetchmail">
                <include name="*.xml"/>
            </zipfileset>
        </sar>
    </target>
    <!--
       ===================================================================
                                  Make dist directory with unpacked dist ready to run
       ===================================================================
  -->
    <target name="dist-lite" depends="sar">
    <echo message="Installing James to ${dist.dir}"/>

        <!--installs sar into ./dist/ ready to test-->
        <copy file="${build.lib}/${name}.sar" todir="${dist.dir}/apps"/>

        <!-- Make mailet.jar-->
        <!-- jar jarfile="${build.lib}/mailet.jar" basedir="${build.classes}" manifest="${src.dir}/Manifest.mf" includes="org/apache/mailet/**"/ -->
        <!-- copy file="${build.lib}/mailet.jar" todir="${dist.dir}/lib"/ -->
    </target>
    <!--
       ===================================================================
                                  binary distributions
       ===================================================================
  -->

    <target name="dist-bin-phoenix-warn" depends="dist-bin-common" unless="phoenix.bin.present">
        <echo message ="The Phoenix distribution is not present - the James w/Phoenix binary distribution will not be built."/>
    </target>

    <target name="dist-bin-phoenix" depends="dist-bin-common" if="phoenix.bin.present">
        <echo message ="Building binary w/Phoenix distributions"/>
        <zip zipfile="${dist.binary.dir}/${name}-binary-${version}.zip">
            <fileset dir="dist">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
                <include name="release-notes.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.binary.dir}/${name}-binary-${version}.tar">
            <tarfileset dir="dist" username="${name}" group="${name}">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
                <include name="release-notes.txt"/>
                <include name="LICENSE.txt"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.binary.dir}/${name}-binary-${version}.tar.gz" src="${dist.binary.dir}/${name}-binary-${version}.tar"/>
        <delete file="${dist.binary.dir}/${name}-binary-${version}.tar"/>
    </target>

    <target name="dist-bin-common" depends="dist-lite,xdocs,javadocs">
        <echo message ="Building binary distributions"/>
        <property name="dist.binary.dir" value="${dist.dir}/downloads/bin"/>
        <mkdir dir="${dist.binary.dir}"/>
        <!-- Sar only-->
        <copy file="${dist.dir}/apps/${name}.sar" todir="${dist.binary.dir}"/>
    </target>

    <target name="dist-bin" depends="dist-bin-common,dist-bin-phoenix-warn,dist-bin-phoenix"/>

    <!--
       ===================================================================
                                  source distributions
       ===================================================================
  -->
    <target name="dist-src-phoenix-warn" depends="dist-src-common" unless="phoenix.bin.present">
        <echo message ="The Phoenix distribution is not present - the James source distribution with Phoenix binaries will not be built."/>
    </target>

    <target name="dist-src-phoenix" depends="dist-src-common" if="phoenix.bin.present">
        <!--Source With Phoenix -->
        <echo message ="Building source distributions with Phoenix binaries"/>
        <zip zipfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.zip">
            <fileset dir=".">
                <exclude name=""/>
                <include name="*.txt"/>
                <include name="*.xml"/>
                <include name="KEYS"/>
                <include name="README"/>
                <include name="LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="build.*"/>
                <include name="lib/**"/>
                <include name="${phoenix.dir}/**"/>
                <include name="proposals/**"/>
                <include name="src/**"/>
                <include name="tools/**"/>
                <include name="www/rfclist/**"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="*.txt"/>
                <include name="*.xml"/>
                <include name="KEYS"/>
                <include name="README"/>
                <include name="LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="build.*"/>
                <include name="lib/**"/>
                <include name="${phoenix.dir}/**"/>
                <include name="proposals/**"/>
                <include name="src/**"/>
                <include name="tools/**"/>
                <include name="www/rfclist/**"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar.gz" src="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar"/>
        <delete file="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar"/>
    </target>

    <target name="dist-src-common" depends="dist-lite,xdocs,javadocs">
        <echo message ="Building source distributions"/>

        <property name="dist.source.dir" value="${dist.dir}/downloads/src"/>
        <mkdir dir="${dist.source.dir}"/>
        <zip zipfile="${dist.source.dir}/${dist.name}-src.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="proposals/**"/>
                <include name="www/rfclist/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.txt"/>
                <include name="README"/>
                <include name="KEYS"/>
                <include name="LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="build.*"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${dist.name}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="proposals/**"/>
                <include name="www/rfclist/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.txt"/>
                <include name="README"/>
                <include name="KEYS"/>
                <include name="LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="build.*"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${dist.name}-src.tar.gz" src="${dist.source.dir}/${dist.name}-src.tar"/>
        <delete file="${dist.source.dir}/${dist.name}-src.tar"/>
    </target>

    <target name="dist-src" depends="dist-src-common,dist-src-phoenix-warn,dist-src-phoenix"/>

    <!--
       ===================================================================
                                  Mailet SDK distribution
       ===================================================================
  -->
    <target name="dist-mailet-SDK" depends="dist-lite,xdocs,javadocs">
        <echo message ="building mailet SDK distributions"/>

        <mkdir dir="${dist.dir}/MailetSDK/src"/>
        <mkdir dir="${dist.dir}/MailetSDK/javadocs"/>
        <copy todir="${dist.dir}/MailetSDK/src">
            <fileset dir="src">
                <include name="**/mailet/**"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/MailetSDK/javadocs">
            <fileset dir="${build.dir}/mailet">
                <include name="**/*"/>
            </fileset>
        </copy>
        <zip zipfile="${dist.dir}/downloads/bin/${name}-MailetSDK-${version}.zip">
            <fileset dir="dist">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.dir}/downloads/bin/${name}-MailetSDK-${version}.tar">
            <tarfileset dir="dist" username="${name}" group="${name}">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.dir}/downloads/bin/${name}-MailetSDK-${version}.tar.gz" src="${dist.dir}/downloads/bin/${name}-MailetSDK-${version}.tar"/>
        <delete file="${dist.dir}/downloads/bin/${name}-MailetSDK-${version}.tar"/>
        <delete dir="${dist.dir}/MailetSDK"/>
    </target>
    <!--
       ===================================================================
                                  delete dist/ and build/
       ===================================================================
  -->
    <target name="clean">
        <echo message ="deleting working directories ready for a clean build"/>

        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>
    <!-- =================================================================== -->
    <!-- Help on usage                                                       -->
    <!-- =================================================================== -->
    <target name="usage">
        <echo message=""/>
        <echo message=""/>
        <echo message="James Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   dist-lite --> generates unpacked distribution (default)"/>
        <echo message="   website   --> makes all the docs and javadocs"/>
        <echo message="   compile   --> compiles the source code"/>
        <echo message="   dist      --> generates all the James distributions, packed"/>
        <echo message="   clean     --> cleans up the directory"/>
        <echo message="   xdocs     --> creates the documentaion for James"/>
        <echo message="   javadocs  --> creates the Javadoc"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>
    </project>
